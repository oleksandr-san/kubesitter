---
# Source: uniskai-agent/templates/rbac.yaml
# Scoped service account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: uniskai-agent
  labels:
    app: uniskai-agent
    app.kubernetes.io/name: uniskai-agent
    app.kubernetes.io/version: "0.0.10"
  namespace: uniskai
automountServiceAccountToken: true
---
# Source: uniskai-agent/templates/rbac.yaml
# Access for the service account
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: uniskai-agent
rules:
  - apiGroups: ["api.profisealabs.com"]
    resources: ["schedulepolicies", "schedulepolicies/status"]
    verbs: ["get", "list", "watch", "patch"]
  - apiGroups: ["events.k8s.io"]
    resources: ["events"]
    verbs: ["create"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["list", "get"]
  - apiGroups: [""]
    resources: ["replicationcontrollers"]
    verbs: ["list", "get", "patch"]
  - apiGroups: ["apps"]
    resources: ["replicasets", "deployments", "daemonsets", "statefulsets"]
    verbs: ["list", "get", "patch"]
  - apiGroups: ["batch"]
    resources: ["cronjobs"]
    verbs: ["list", "get", "patch"]
---
# Source: uniskai-agent/templates/rbac.yaml
# Binding the role to the account
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: uniskai-agent
subjects:
- kind: ServiceAccount
  namespace: uniskai
  name: uniskai-agent
roleRef:
  kind: ClusterRole
  name: uniskai-agent
  apiGroup: rbac.authorization.k8s.io
---
# Source: uniskai-agent/templates/service.yaml
# Expose the http port of the service
apiVersion: v1
kind: Service
metadata:
  name: uniskai-agent
  namespace: uniskai
  labels:
    app: uniskai-agent
    app.kubernetes.io/name: uniskai-agent
    app.kubernetes.io/version: "0.0.10"
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: uniskai-agent
---
# Source: uniskai-agent/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: uniskai-agent
  namespace: uniskai
  labels:
    app: uniskai-agent
    app.kubernetes.io/name: uniskai-agent
    app.kubernetes.io/version: "0.0.10"
  annotations:
    cloudsitter.uniskai.com/skip: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: uniskai-agent
  template:
    metadata:
      labels:
        app: uniskai-agent
      annotations:
        kubectl.kubernetes.io/default-container: uniskai-agent
    spec:
      serviceAccountName: uniskai-agent
      securityContext:
        {}
      dnsConfig:
        nameservers:
          - 8.8.8.8
          - 8.8.4.4
      volumes:
        - name: vpn-config
          secret:
            secretName: vpn-config
            items:
                - key: client.ovpn
                  path: client.ovpn
        - name: vpn-auth
          secret:
            secretName: vpn-auth
            items:
                - key: auth.txt
                  path: auth.txt
        - name: tmp
          emptyDir: {}
      initContainers:
      - name: vpn-route-init
        image: busybox
        command:
          - /bin/sh
          - -c
          - |
            KUBERNETES_SERVICE_HOST=$KUBERNETES_SERVICE_HOST
            DEFAULT_GATEWAY=$(ip route | grep default | awk '{print $3}')
            echo "KUBERNETES_SERVICE_HOST: $KUBERNETES_SERVICE_HOST"
            echo "DEFAULT_GATEWAY: $DEFAULT_GATEWAY"
            echo "BEGIN"

            echo "#!/bin/sh" > /tmp/route/route-override.sh
            echo "VPN_GATEWAY=\$(route -n | awk 'NR==3' | awk '{ print \$2 }')" >> /tmp/route/route-override.sh
            echo "ip route del 0.0.0.0/1 via \$VPN_GATEWAY" >> /tmp/route/route-override.sh
            echo "ip route add ${KUBERNETES_SERVICE_HOST} via ${DEFAULT_GATEWAY}" >> /tmp/route/route-override.sh
            echo "echo 'Route Updated'" >> /tmp/route/route-override.sh

            cat /tmp/route/route-override.sh
            chown root:root /tmp/route/route-override.sh
            chmod o+x /tmp/route/route-override.sh
            echo "END"

        volumeMounts:
          - name: tmp
            mountPath: /tmp/route
      containers:
      - name: vpn
        image: dperson/openvpn-client
        command: ["/bin/sh","-c"]
        args: ["openvpn --config 'vpn/client.ovpn' --auth-user-pass 'vpn/auth.txt' --script-security 3 --route-up /tmp/route/route-override.sh;"]
        stdin: true
        tty: true
        securityContext:
          privileged: true
          capabilities:
            add:
              - NET_ADMIN
        volumeMounts:
          - name: vpn-config
            mountPath: /vpn/client.ovpn
            subPath: client.ovpn
          - name: vpn-auth
            mountPath: /vpn/auth.txt
            subPath: auth.txt
          - name: tmp
            mountPath: /tmp/route
      - name: uniskai-agent
        image: 199042988758.dkr.ecr.eu-west-1.amazonaws.com/uniskai-agent-dev:0.0.10
        imagePullPolicy: IfNotPresent
        securityContext:
          {}
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 50m
            memory: 100Mi
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        env:
        - name: RUST_LOG
          value: info,kube=debug,controller=debug
        - name: UNISKAI_API_URL
          value: profisealabs.com
        envFrom:
          - secretRef:
              name: uniskai-agent
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
